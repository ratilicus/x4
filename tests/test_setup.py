"""
Run tests
Use: ./run_tests.sh
"""

from unittest import TestCase
from unittest.mock import call, patch, MagicMock
from setup import get_steam_folders, get_game_path, link_game_path, gen_setup_py


class PackModUnitTest(TestCase):

    @patch('builtins.open')
    @patch('setup.os')
    def test_get_steam_path(self, patch_os, patch_open):
        patch_os.path.expanduser.side_effect = expanduser = [MagicMock(), MagicMock()]
        patch_os.path.exists.return_value = True
        patch_open.return_value.__enter__.return_value.__iter__.return_value = [
            '\t"something"\t\t"some value"',
            '\t"1"\t\t"/folder1"',
            '\t"2"\t\t"/folder2"',
        ]
        folders = list(get_steam_folders())
        self.assertEqual(folders, [
            expanduser[1],
            '/folder1/steamapps/common',
            '/folder2/steamapps/common',
        ])
        self.assertEqual(patch_os.path.expanduser.call_count, 2)
        patch_os.path.expanduser.assert_has_calls([
            call('~/.local/share/Steam/steamapps/libraryfolders.vdf'),
            call('~/.local/share/Steam/steamapps/common')
        ])
        patch_os.path.exists.assert_called_once_with(expanduser[0])
        patch_open.assert_called_once_with(expanduser[0])

    @patch('builtins.open')
    @patch('setup.os')
    def test_get_steam_path_vdf_dne(self, patch_os, patch_open):
        patch_os.path.expanduser.side_effect = expanduser = [MagicMock(), MagicMock()]
        patch_os.path.exists.return_value = False
        with self.assertRaises(SystemExit):
            next(get_steam_folders())

    @patch('setup.glob.iglob')
    @patch('setup.get_steam_folders')
    def test_get_game_path(self, patch_get_steam_folders, patch_iglob):
        patch_get_steam_folders.return_value = ['folder1', 'folder2']
        patch_iglob.side_effect = [[], ['/path/to/X4 Foundation/X4']]
        self.assertEqual(get_game_path(), '/path/to/X4 Foundation')
        patch_iglob.assert_has_calls([
            call('folder1/*/X4'),
            call('folder2/*/X4'),
        ])

    @patch('setup.glob.iglob')
    @patch('setup.get_steam_folders')
    def test_get_game_path_dne(self, patch_get_steam_folders, patch_iglob):
        patch_get_steam_folders.return_value = ['folder1', 'folder2']
        patch_iglob.side_effect = [[], []]
        with self.assertRaises(SystemExit):
            get_game_path()

    @patch('setup.os')
    @patch('setup.get_game_path')
    def test_link_game_path_link_exists(self, patch_get_game_path, patch_os):
        patch_os.path.lexists.return_value = True
        link_game_path()
        patch_os.path.lexists.assert_called_once_with('game')
        patch_os.unlink.assert_called_once_with('game')
        patch_os.symlink.assert_called_once_with(patch_get_game_path.return_value, 'game')

    @patch('setup.os')
    @patch('setup.get_game_path')
    def test_link_game_path_link_dne(self, patch_get_game_path, patch_os):
        patch_os.path.lexists.return_value = False
        link_game_path()
        patch_os.path.lexists.assert_called_once_with('game')
        self.assertEqual(patch_os.unlink.call_count, 0)
        patch_os.symlink.assert_called_once_with(patch_get_game_path.return_value, 'game')

    @patch('builtins.open')
    @patch('setup.os')
    @patch('setup.link_game_path')
    def test_gen_setup_py(self, patch_link_game_path, patch_os, patch_open):
        patch_os.getcwd.return_value = pwd = '/path/to/cwd'
        gen_setup_py()
        patch_link_game_path.assert_called_once_with()
        patch_open.assert_called_once_with('config.py', 'w')
        patch_open.return_value.__enter__.return_value.write.assert_has_calls([
            call('# script generated by /home/adam/x4/setup.py\n'),
            call(f'X4 = "{pwd}/game"\n'),
            call(f'PWD = "{pwd}"\n'),
            call(f'SRC = "{pwd}/src"\n'),
            call(f'MODS = "{pwd}/mods"\n'),
            call(f'OBJS = "{pwd}/objs"\n'),
            call(f'THUMBS = "{pwd}/thumbs"\n'),
        ])